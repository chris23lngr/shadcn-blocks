import { getCategories } from '@/lib/category';
import { getCollections } from '@/lib/collection';
import fs from 'fs';
import path from 'path';

async function go() {
  const registryPath = path.join(
    process.cwd(),
    '/src/__registry__/',
    'index.ts'
  );

  let index = `// Path: src/__registry__/index.ts
// This file is generated by scripts/build-registry.ts
// Do not edit this file directly

type Registry = {
  id: string;
  label: string;
  collections: { id: string; label: string }[];
}[];
  
export const Index: Registry = [`;

  const categories = await getCategories();

  if (categories === null) {
    console.error('Categories not found');
    return;
  }

  for (const category of categories) {
    index += `
  {
    id: '${category.id}',
    label: '${category.label}',
    collections: [`;

    if (category.id === undefined) {
      console.error('Category id not available');
      continue;
    }

    const collections = await getCollections(category.id);

    if (collections === null) {
      console.error('Collections not found');
      continue;
    }

    for (const collection of collections) {
      index += `
      {
        id: '${collection.id}',
        label: '${collection.label}'
      },`;
    }
    index += `
    ]
  },`;
  }
  index += `
]`;
  console.log(index);

  if (!fs.existsSync(path.dirname(registryPath))) {
    fs.mkdirSync(path.dirname(registryPath), { recursive: true });
  }

  fs.writeFileSync(registryPath, index);
}

go();
