import { BlockMetadata } from '@/lib/types';
import fs from 'fs';
import path from 'path';

const registryPath = path.join(__dirname, '../src/__registry__/index.ts');
const blockPath = path.join(__dirname, '../src/registry/blocks');

// ----------------------------------------------------------------------------
// Build __registry__/index.ts.
// ----------------------------------------------------------------------------
let index = `// @ts-nocheck
// This file is autogenerated by scripts/build-registry.ts
// Do not edit this file directly.

// import * as React from "react"

export const Index: Record<string, any> = {
  "default": {`;

async function go() {
  const categories = fs.readdirSync(blockPath);

  for (const category of categories) {
    // Check if the category is a directory
    const isDirectory = fs
      .lstatSync(path.join(blockPath, category))
      .isDirectory();

    if (isDirectory) {
      index += `
    "${category}": {`;

      console.log('Iterating through category:', category);

      const resolvedBlocks = fs.readdirSync(blockPath + '/' + category);

      // Iterate through the blocks in the category
      for (const block of resolvedBlocks) {
        // Check if the block is a file ending with the .tsx extension

        if (block.endsWith('.meta.ts')) {
          console.log('Skipping metadata file:', block);
          continue;
        }

        const isTsx = block.endsWith('.tsx');

        if (!isTsx) {
          console.log('Not a tsx file:', block);
          continue;
        }

        // Get the block name
        const blockName = block.split('.')[0];

        // Check if the block has a metadata file associated with it ([block].meta.ts)
        const hasMetadata = fs.existsSync(
          `${blockPath}/${category}/${blockName}.meta.ts`
        );

        if (!hasMetadata) {
          console.log('No metadata found for block:', blockName);
          continue;
        }

        // import the block metadata from [block].meta.ts
        const blockImport = await import(
          `${blockPath}/${category}/${blockName}.meta.ts`
        );

        const metadata: BlockMetadata = blockImport.default as BlockMetadata;

        // Check if the type of the metadata is BlockMetadata
        if (metadata === undefined) {
          console.log('Metadata not found for block:', blockName);
          continue;
        }

        // Print out the metadata for the block
        console.log(`Metadata for block: ${blockName}`, metadata);

        index += `
      "${blockName}": {
        id: '${blockName}',
        name: '${metadata.name}',
        description: '${metadata.description}',
      },`;
      }
      index += `
    },`;
    }
  }

  index += `
  }
}`;

  fs.writeFileSync(registryPath, index);

  console.log('Registry built! ✅');
}

go();

const readMe = path.join(__dirname, '../src/__registry__/README.md');

fs.writeFileSync(
  readMe,
  `# Autogenerated Registry
Do not edit any of the files in this directory directly. It is autogenerated by the build-registry script.`
);

// const resolvedBlocks = fs.readdirSync(blockPath);

// for (const block of resolvedBlocks) {
//   const blockName = block.split('.')[0];

//   const codeValue = fs.readFileSync(`${blockPath}/${block}`, 'utf8');

//   const code = codeValue.replace(/(?:\r\n|\r|\n)/g, '\\n');

//   const metadata = import(`../src/registry/blocks/${blockName}`).then(
//     (m) => m.metadata
//   );

//   index += `        "${blockName}": {
//             name: '${blockName}',
//             component: React.lazy(() => import('@/registry/blocks/${block}')),
//             files: ['registry/blocks/${block}'],
//             code: \`${code}\`,
//         },
// `;
// }

// index += `
//     }
// }
// `;

// fs.writeFileSync(registryPath, index);

// console.log('Registry built! ✅');

// async function build() {
//   const metadata = await import(
//     '../src/registry/blocks/auth/auth-simple-centered'
//   ).then((m) => m.metadata);
// }

// ----------------------------------------------------------------------------
// TODO: Build /app/blocks/[block]/page.tsx
